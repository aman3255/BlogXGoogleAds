const BlogModel = require('../models/blog.model');

const updateBlogPost = async (req, res) => {
    try {
        const { id } = req.params; // Blog post ID from URL
        const {
            title,
            content,
            excerpt,
            photo,
            tags,
            category,
            status,
            metaDescription,
            adSettings
        } = req.body;

        // Get the current user ID from auth middleware
        const currentUserId = req.user.id;

        // Find the blog post
        const existingBlog = await BlogModel.findById(id);
        if (!existingBlog) {
            return res.status(404).json({
                success: false,
                message: "Blog post not found"
            });
        }

        // Check if the current user is the author of the blog post
        if (existingBlog.author.toString() !== currentUserId) {
            return res.status(403).json({
                success: false,
                message: "You are not authorized to update this blog post"
            });
        }

        // Prepare update data (only include fields that are provided)
        const updateData = {};
        
        if (title !== undefined) {
            updateData.title = title.trim();
            // Reset slug if title is changed (will be regenerated by pre-save hook)
            updateData.slug = undefined;
        }
        if (content !== undefined) updateData.content = content;
        if (excerpt !== undefined) updateData.excerpt = excerpt ? excerpt.trim() : excerpt;
        if (photo !== undefined) updateData.photo = photo;
        if (tags !== undefined) {
            updateData.tags = Array.isArray(tags) ? tags : (tags ? [tags] : []);
        }
        if (category !== undefined) updateData.category = category;
        if (status !== undefined) updateData.status = status;
        if (metaDescription !== undefined) {
            updateData.metaDescription = metaDescription ? metaDescription.trim() : metaDescription;
        }
        if (adSettings !== undefined) updateData.adSettings = adSettings;

        // Update the blog post
        const updatedBlog = await BlogModel.findByIdAndUpdate(
            id,
            updateData,
            { 
                new: true, // Return updated document
                runValidators: true // Run schema validations
            }
        ).populate('author', 'username fullName');

        if (!updatedBlog) {
            return res.status(404).json({
                success: false,
                message: "Blog post not found"
            });
        }

        // Response
        res.status(200).json({
            success: true,
            message: "Blog post updated successfully",
            blog: {
                id: updatedBlog._id,
                title: updatedBlog.title,
                slug: updatedBlog.slug,
                content: updatedBlog.content,
                excerpt: updatedBlog.excerpt,
                photo: updatedBlog.photo,
                author: {
                    id: updatedBlog.author._id,
                    username: updatedBlog.author.username,
                    fullName: updatedBlog.author.fullName
                },
                tags: updatedBlog.tags,
                category: updatedBlog.category,
                status: updatedBlog.status,
                views: updatedBlog.views,
                likes: updatedBlog.likes,
                metaDescription: updatedBlog.metaDescription,
                adSettings: updatedBlog.adSettings,
                createdAt: updatedBlog.createdAt,
                updatedAt: updatedBlog.updatedAt
            }
        });

    } catch (error) {
        console.error("Error in updateBlogPost:", error);

        // Handle validation errors
        if (error.name === 'ValidationError') {
            const validationErrors = Object.values(error.errors).map(err => err.message);
            return res.status(400).json({
                success: false,
                message: "Validation failed",
                errors: validationErrors
            });
        }

        // Handle duplicate slug error
        if (error.code === 11000 && error.keyPattern && error.keyPattern.slug) {
            return res.status(409).json({
                success: false,
                message: "Blog post with this title already exists. Please choose a different title."
            });
        }

        // Handle invalid ObjectId error
        if (error.name === 'CastError') {
            return res.status(400).json({
                success: false,
                message: "Invalid blog post ID"
            });
        }

        // Handle other errors
        res.status(500).json({
            success: false,
            message: "Internal server error"
        });
    }
};

module.exports = {
    updateBlogPost
}